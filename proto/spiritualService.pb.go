// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: spiritualService.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question string `protobuf:"bytes,1,opt,name=Question,proto3" json:"Question,omitempty"`
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spiritualService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_spiritualService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_spiritualService_proto_rawDescGZIP(), []int{0}
}

func (x *Question) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answer string `protobuf:"bytes,1,opt,name=Answer,proto3" json:"Answer,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spiritualService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_spiritualService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_spiritualService_proto_rawDescGZIP(), []int{1}
}

func (x *Answer) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type Festival struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Festival) Reset() {
	*x = Festival{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spiritualService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Festival) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Festival) ProtoMessage() {}

func (x *Festival) ProtoReflect() protoreflect.Message {
	mi := &file_spiritualService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Festival.ProtoReflect.Descriptor instead.
func (*Festival) Descriptor() ([]byte, []int) {
	return file_spiritualService_proto_rawDescGZIP(), []int{2}
}

func (x *Festival) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Gift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Gift) Reset() {
	*x = Gift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spiritualService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gift) ProtoMessage() {}

func (x *Gift) ProtoReflect() protoreflect.Message {
	mi := &file_spiritualService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gift.ProtoReflect.Descriptor instead.
func (*Gift) Descriptor() ([]byte, []int) {
	return file_spiritualService_proto_rawDescGZIP(), []int{3}
}

func (x *Gift) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Wish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Wish) Reset() {
	*x = Wish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spiritualService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wish) ProtoMessage() {}

func (x *Wish) ProtoReflect() protoreflect.Message {
	mi := &file_spiritualService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wish.ProtoReflect.Descriptor instead.
func (*Wish) Descriptor() ([]byte, []int) {
	return file_spiritualService_proto_rawDescGZIP(), []int{4}
}

func (x *Wish) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Blessing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Blessing) Reset() {
	*x = Blessing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spiritualService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blessing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blessing) ProtoMessage() {}

func (x *Blessing) ProtoReflect() protoreflect.Message {
	mi := &file_spiritualService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blessing.ProtoReflect.Descriptor instead.
func (*Blessing) Descriptor() ([]byte, []int) {
	return file_spiritualService_proto_rawDescGZIP(), []int{5}
}

func (x *Blessing) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_spiritualService_proto protoreflect.FileDescriptor

var file_spiritualService_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x26, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x1e, 0x0a, 0x08, 0x46, 0x65, 0x73,
	0x74, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x04, 0x47, 0x69, 0x66,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x04, 0x57, 0x69, 0x73, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x1e, 0x0a, 0x08, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x99, 0x01, 0x0a, 0x10, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x41, 0x73, 0x6b, 0x47, 0x65, 0x6e,
	0x69, 0x65, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x73, 0x12,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6c,
	0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x30, 0x01, 0x12,
	0x2c, 0x0a, 0x08, 0x4c, 0x65, 0x74, 0x73, 0x50, 0x72, 0x61, 0x79, 0x12, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spiritualService_proto_rawDescOnce sync.Once
	file_spiritualService_proto_rawDescData = file_spiritualService_proto_rawDesc
)

func file_spiritualService_proto_rawDescGZIP() []byte {
	file_spiritualService_proto_rawDescOnce.Do(func() {
		file_spiritualService_proto_rawDescData = protoimpl.X.CompressGZIP(file_spiritualService_proto_rawDescData)
	})
	return file_spiritualService_proto_rawDescData
}

var file_spiritualService_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_spiritualService_proto_goTypes = []interface{}{
	(*Question)(nil), // 0: proto.Question
	(*Answer)(nil),   // 1: proto.Answer
	(*Festival)(nil), // 2: proto.Festival
	(*Gift)(nil),     // 3: proto.Gift
	(*Wish)(nil),     // 4: proto.Wish
	(*Blessing)(nil), // 5: proto.Blessing
}
var file_spiritualService_proto_depIdxs = []int32{
	0, // 0: proto.SpiritualService.AskGenie:input_type -> proto.Question
	2, // 1: proto.SpiritualService.SendGifts:input_type -> proto.Festival
	4, // 2: proto.SpiritualService.LetsPray:input_type -> proto.Wish
	1, // 3: proto.SpiritualService.AskGenie:output_type -> proto.Answer
	3, // 4: proto.SpiritualService.SendGifts:output_type -> proto.Gift
	5, // 5: proto.SpiritualService.LetsPray:output_type -> proto.Blessing
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_spiritualService_proto_init() }
func file_spiritualService_proto_init() {
	if File_spiritualService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spiritualService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spiritualService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spiritualService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Festival); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spiritualService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spiritualService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spiritualService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blessing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spiritualService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spiritualService_proto_goTypes,
		DependencyIndexes: file_spiritualService_proto_depIdxs,
		MessageInfos:      file_spiritualService_proto_msgTypes,
	}.Build()
	File_spiritualService_proto = out.File
	file_spiritualService_proto_rawDesc = nil
	file_spiritualService_proto_goTypes = nil
	file_spiritualService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SpiritualServiceClient is the client API for SpiritualService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpiritualServiceClient interface {
	AskGenie(ctx context.Context, in *Question, opts ...grpc.CallOption) (*Answer, error)
	SendGifts(ctx context.Context, in *Festival, opts ...grpc.CallOption) (SpiritualService_SendGiftsClient, error)
	LetsPray(ctx context.Context, opts ...grpc.CallOption) (SpiritualService_LetsPrayClient, error)
}

type spiritualServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpiritualServiceClient(cc grpc.ClientConnInterface) SpiritualServiceClient {
	return &spiritualServiceClient{cc}
}

func (c *spiritualServiceClient) AskGenie(ctx context.Context, in *Question, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/proto.SpiritualService/AskGenie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiritualServiceClient) SendGifts(ctx context.Context, in *Festival, opts ...grpc.CallOption) (SpiritualService_SendGiftsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpiritualService_serviceDesc.Streams[0], "/proto.SpiritualService/SendGifts", opts...)
	if err != nil {
		return nil, err
	}
	x := &spiritualServiceSendGiftsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpiritualService_SendGiftsClient interface {
	Recv() (*Gift, error)
	grpc.ClientStream
}

type spiritualServiceSendGiftsClient struct {
	grpc.ClientStream
}

func (x *spiritualServiceSendGiftsClient) Recv() (*Gift, error) {
	m := new(Gift)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spiritualServiceClient) LetsPray(ctx context.Context, opts ...grpc.CallOption) (SpiritualService_LetsPrayClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpiritualService_serviceDesc.Streams[1], "/proto.SpiritualService/LetsPray", opts...)
	if err != nil {
		return nil, err
	}
	x := &spiritualServiceLetsPrayClient{stream}
	return x, nil
}

type SpiritualService_LetsPrayClient interface {
	Send(*Wish) error
	Recv() (*Blessing, error)
	grpc.ClientStream
}

type spiritualServiceLetsPrayClient struct {
	grpc.ClientStream
}

func (x *spiritualServiceLetsPrayClient) Send(m *Wish) error {
	return x.ClientStream.SendMsg(m)
}

func (x *spiritualServiceLetsPrayClient) Recv() (*Blessing, error) {
	m := new(Blessing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpiritualServiceServer is the server API for SpiritualService service.
type SpiritualServiceServer interface {
	AskGenie(context.Context, *Question) (*Answer, error)
	SendGifts(*Festival, SpiritualService_SendGiftsServer) error
	LetsPray(SpiritualService_LetsPrayServer) error
}

// UnimplementedSpiritualServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSpiritualServiceServer struct {
}

func (*UnimplementedSpiritualServiceServer) AskGenie(context.Context, *Question) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskGenie not implemented")
}
func (*UnimplementedSpiritualServiceServer) SendGifts(*Festival, SpiritualService_SendGiftsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendGifts not implemented")
}
func (*UnimplementedSpiritualServiceServer) LetsPray(SpiritualService_LetsPrayServer) error {
	return status.Errorf(codes.Unimplemented, "method LetsPray not implemented")
}

func RegisterSpiritualServiceServer(s *grpc.Server, srv SpiritualServiceServer) {
	s.RegisterService(&_SpiritualService_serviceDesc, srv)
}

func _SpiritualService_AskGenie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Question)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiritualServiceServer).AskGenie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SpiritualService/AskGenie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiritualServiceServer).AskGenie(ctx, req.(*Question))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpiritualService_SendGifts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Festival)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpiritualServiceServer).SendGifts(m, &spiritualServiceSendGiftsServer{stream})
}

type SpiritualService_SendGiftsServer interface {
	Send(*Gift) error
	grpc.ServerStream
}

type spiritualServiceSendGiftsServer struct {
	grpc.ServerStream
}

func (x *spiritualServiceSendGiftsServer) Send(m *Gift) error {
	return x.ServerStream.SendMsg(m)
}

func _SpiritualService_LetsPray_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpiritualServiceServer).LetsPray(&spiritualServiceLetsPrayServer{stream})
}

type SpiritualService_LetsPrayServer interface {
	Send(*Blessing) error
	Recv() (*Wish, error)
	grpc.ServerStream
}

type spiritualServiceLetsPrayServer struct {
	grpc.ServerStream
}

func (x *spiritualServiceLetsPrayServer) Send(m *Blessing) error {
	return x.ServerStream.SendMsg(m)
}

func (x *spiritualServiceLetsPrayServer) Recv() (*Wish, error) {
	m := new(Wish)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SpiritualService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SpiritualService",
	HandlerType: (*SpiritualServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskGenie",
			Handler:    _SpiritualService_AskGenie_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendGifts",
			Handler:       _SpiritualService_SendGifts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LetsPray",
			Handler:       _SpiritualService_LetsPray_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "spiritualService.proto",
}
